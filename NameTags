```lua
-- Register the behaviour
behaviour("NameTags")

-- This behaviour draws a team-colored name tag above all actors' heads.

-- self.targets.tagPrefab is the prefab containing the UI Text.
-- self.targets.canvas is the GameObject that has the Canvas component used to draw the Texts.

-- This is our drawing strategy:
-- For all actors, draw the tag if we are looking roughly at them and we have clear line-of-sight.
-- For teammates, always draw the tag if the player is close.

local camera = PlayerCamera.activeCamera

function NameTags:Start()

	-- We store all the actors and tags in this table
	self.tags = {}

	

	-- Find all bot actors
	for k,actor in pairs(ActorManager.actors) do
		if actor.isBot then

			-- Instantiate a tag for each bot actor.
			local tag = GameObject.Instantiate(self.targets.tagPrefab).GetComponent(Text)
			tag.rectTransform.parent = self.targets.canvas.transform

			-- Set up the tag color based on team.
			local color = ColorScheme.GetTeamColorBrighter(Team.Blue)
			if actor.team == Team.Red then
				color = ColorScheme.GetTeamColorBrighter(Team.Red)
			end
			color = Color.Lerp(color, Color.white, 0.5) -- Brighten the tag a little bit
			local prefix = ColorScheme.RichTextColorTag(color)

			-- Set the tag text. Use rich text color to control its color.
			tag.text = prefix .. actor.name .. "</color>"

			-- Put the tag in a corner and make it invisible.
			tag.rectTransform.position = Vector3.zero
			tag.CrossFadeAlpha(0, 0, true)

			-- Set up a tagData table for this tag. In addition to the tag itself, this table is used to store drawing data.
			tagData = {}
			tagData.tag = tag;
			tagData.isDrawing = false
			tagData.lastSeenTimestamp = 0;

			-- Store the tag data in the table of all tags
			self.tags[actor] = tagData
		end
	end
end

function NameTags:Update()
	-- If tags are not set up (due to a bad script reload) abort the Update() function.
	if self.tags ~= nil then

		-- Loop through all tagData
		for actor,tagData in pairs(self.tags) do

			local tag = tagData.tag

			-- Calculate the world position and screen position we want the tag to hover at.
			local anchorWorldPos = actor.centerPosition;
			anchorWorldPos.y = anchorWorldPos.y + 1
			local anchorScreenPos = camera.WorldToScreenPoint(anchorWorldPos)

			-- Move the tag.
			tag.rectTransform.position = anchorScreenPos

			-- We use ActorManager.ActorCanSeePlayer() since it is the quickest way of checking if the player has a clear line of sight to the actor.
			if(ActorManager.ActorCanSeePlayer(actor)) then
				tagData.lastSeenTimestamp = Time.time;
			end

			-- Our drawing strategy depends on if the actor is a teammate, if it's close to the center of the screen, caluclate those values.
			local isTeammate = actor.team == Player.team
			local focusSize = Screen.height/10
			local isInFocus = math.abs(anchorScreenPos.x - Screen.width/2) < focusSize and math.abs(anchorScreenPos.y - Screen.height/2) < focusSize

			-- Set isInView to true if the actor is in front of the camera. We use this to hide the tag when the actor is behind the camera to avoid buggy behaviour.
			local isInView = anchorScreenPos.z > 0

			-- This flag controls whether the tag should be drawn according to our drawing strategy.
			local shouldDraw = isInView and not actor.isDead and (isInFocus or (isTeammate and anchorScreenPos.z < 50)) and tagData.lastSeenTimestamp > Time.time - 0.2

			-- Check if the drawing flag changed this tick.
			if not tagData.isDrawing and shouldDraw then
				-- Start drawing the tag
				tagData.isDrawing = true
				tag.CrossFadeAlpha(1, 0.1, true)
			elseif tagData.isDrawing and not shouldDraw then
				-- Stop drawing the tag
				tagData.isDrawing = false
				tag.CrossFadeAlpha(0, 0.1, true)
			end
			
			-- If the tag isn't in view (IE is not in front of the camera) we immediately hide it to prevent graphical bugs.
			-- We hide the tag by setting its color to Color.clear, which is a value with alpha 0, making it invisible.
			-- Please note that this color is not the same as the crossfade color. Nor is it the same as the rich text color tag.
			-- The final color is a multiplication blend between the rich text tag, the crossfade color and this color.
			if(isInView) then
				tag.color = Color.white;
			else
				tag.color = Color.clear;
			end
		end
	end
end
```
